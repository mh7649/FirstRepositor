1、软件架构
	C/S: Client/Server    客户服务器架构
	B/S: Browser/Server  浏览器服务器架构（发展趋势）
	
2、简单的服务器
	1）数据库服务器，用于存储数据，提供数据
	2）WEB服务器，用于存储网站相关的数据.html,  .jsp文件
	3）FTP服务器，文件传输服务器，用于提供文件的上传和下载
	4）DNS服务器，动态域名服务器，用户提供域名到ip地址的解析
	5）POP3服务器，邮件接收服务器
	6）SMTP服务器，邮件发送服务器
	
3、用Java程序来访问数据库
	JDBC：Java DataBase Connectivity   Java数据库连接
	
	提供了不同的JAR包来访问不同的数据库，但是不同的数据库所使用的JAR包都统一遵循一致的标准，这个标准就称之为JDBC.
	JDBC提供了连接数据库，读取数据库，存储数据库的一些 api接口和简单实现
	
	MySQL: mysql-jdbc-connector
	SQLServer: sqlserver
	Oracle: oracle
	
4、驱动程序：用来使数据库系统与Java程序进行交互的库文件
	驱动程序管理器：用于管理驱动程序
	连接：Java程序与数据库创建一个连接，只有建立了连接才能在程序与数据库之间交换数据
	
	localhost：表示电脑本身，一个程序安装在电脑A上，去连接A上的一个服务器，localhost
		localhost: 127.0.0.1
	
	端口号：如果两台电脑通过网络来通信，则两台电脑上的程序必须指定一个“接入口”来对接。通常与ip地址结合使用
		localhost:8080   表示本机电脑8080端口
		192.168.2.99:1433   表示192.168.2.99的这台电脑上的1433端口所对应的程序
		
		ip地址加端口号用来唯一确定一台电脑上的一个服务

5、JDBC操作SQLServer
	1）导入JAR文件，并且配置构建路径
	2）加载驱动程序
		数据库驱动程序实际上就是JDBC的实现
		com.microsoft.sqlserver.jdbc.SQLServerDriver
		
		User u = new User();
		第一个步骤：把User类加载到类装载器中（ClassLoader）
		第二个步骤：创建User类的实例
		
	3）通过驱动管理器创建连接
		java.sql.DriverManager驱动管理器
		
		java.sql.Connection数据库连接
		
		DriverManager.getConnection(String, String, String)来创建与数据库的连接 
		第一个参数表示：告诉程序连接哪台服务器上的哪个数据库
			jdbc:sqlserver://localhost:1433;DatabaseName=jdbc
			
			用本机上的端口号为1433数据库服务器里的jdbc数据库
		
		第二个参数表示：连接此服务器上的数据库所使用的用户名
			sa
			
		第三个参数表示：用户名所对应的密码
			123456
		
	4）使用Connection对象创建java.sql. Statement对象，用于把SQL语句发送到数据库服务器，数据库服务器执行SQL语句
		connection.createStatement();
		connection.setAutoCommit(true/false);如果设置了自动提交为False，则必须调用
		connection.commit()方法手动提交
	
	5）使用Statement对象发送SQL到数据库服务器
		boolean statement.execute(String sql); // 把sql语句发送到数据库服务 端 并执行，执行后把数据返回
		
	6）使用java.sql.ResultSet来接收第5步中返回的数据
		结果集
		此结果集包含了返回的数据，如果是行数据，则有一个默认指向第一行数据 前面的光标
		next()方法移动光标到下一行，如果下一行有数据，则返回true
		while (rs.next() {
		
		}
		
		ResultSet获取行数据，通过字段的索引来获取数据，从1开始
											通过字段的名称来获取数据（推荐使用此种 方式 ）
			getString();
			getInt();
			getDouble();
			getFloat();
			getShort();
			getLong();
			
	7、闭关连接
		数据库连接是耗性能的连接，所以使用完后需要及时地关闭连接
		1）一个连接所占用的内存开销大
		2）任何一个数据库所能够同时支持的连接数是有限的
		
		先关闭ResultSet
		再关闭Statement
		后关闭Connection
		
6、查询数据库
	ResultSet rs = executeQuery(String sql);
	while (rs.next()) {
		getString();
		getInt();
		getDouble();
		getFloat();
		getShort();
		getLong();
	}
	
	if (rs.next()) {
		// 把第一行数据获取到
	}
	
7、插入，删除，更新数据
	Statement stmt = conn.createStatement();
			// 如果结果为真，则表示返回值为ResultSet结果集，如果结果是假，则表示返回的是影响的行数或者没有结果
			stmt.execute("delete from t_student where id = 2"); // 更新，插入，删除
			if (stmt.getUpdateCount() == 1) { // 获取更新的行数
				System.out.println("删除成功");
			}
			
8、SQL注入
	在使用Statement对象时，执行的sql语句必须通过与参数拼接的方式生成，在拼接sql语句时，哪怕没有输入正常的数据，
	也可以通过对sql语句的组合生成结果为真的语句
	
	为了解决sql注入的问题，提供了java.sql.PreparedStatement，预处理Statement，会把sql语句进行预处理，不会
	对sql进行拼接，效率比Statement高
	
	为了数据库的安全性和，请使用PreparedStatement
	
9、事务处理
	把一件事情拆分成多个步骤，只有每一个步骤都成功了，整件事情才算成功完成。
	只要有任何一个步骤不成功，则整件事情失败，数据库需要回滚到操作此事情前的状态
	
	每一个步骤都是成功，则事务提交commit
	有一个步骤是失败的，则事务回滚rollback
	
	
	JDBC默认是自动提交的
	
10、数据库的元数据
	Meta Data
	表：表的名称，有哪些列，列的名称
	
11、数据访问类
	DAO，Data Access Object(数据访问对象)
	
	DAO只负责连接数据库，访问（增，删，改，查）数据库
	
	CRUD(Create增加, Retrieve查询, Update更新, Delete删除)
	
12、实体类
	与一张数据表相对应的JavaBean，JavaBean的属性与表的字段一一对应，属性的数据类型与表的字段数据类型要一致
	
	t_student: id  name   age
	Student: id name age
	
	t_user: id  email  pwd  age  phone address
	User: id  email  pwd  age  phone  address
	
13、泛型
	<T>
	<E>
	定义方法或类的时候代表任何一种类型，
	在使用方法或类的时候必须明确指定使用的是哪一种类型
	
14、java.io.Serializable接口是序列化标识接口，也可以表示任何一种可序列化的数据类型
	int, String, double, float都可以序列化
	
15、JUnit的扩展使用
	如果有多个测试方法，每一个测试方法内部都需要用到同一个对象，则
	此对象需要提前实例化
	
	JUnit提供了TestCase类，此类提供了一个setUp方法，setUp方法会在每一个测试方法之前跑
	
16、业务逻辑
	就是处理事情的步骤	
	任何一个项目都有众多的业务逻辑需要处理
	
	业务逻辑完成对数据的加工处理
	
	com.gs.service
	
	DAO与Service的关系
		DAO负责从数据库获取数据，修改数据，插入数据，删除数据，但是不会对数据进行任何加工处理，
		而是把加工处理交给service
		
		
	数据库(存储所有数据)---->DAO（CRUD）----->Service(把DAO返回的数据加工，把数据加工后传递给dao进行保存)

17、MVC设计模式
	模型：Model(DAO + Service)
	视图：View(Swing Frame，JSP网页)
	控制器：Controller(完成视图间的切换，从视图获取数据交给service加工，service加工完后交给dao)
	
	数据库	------> dao  -----> service   ------> Controller   ----> view
	view   ----->  Controller    -----> service  ----->  dao -----> 数据库
	
	MVC分层架构
	

	