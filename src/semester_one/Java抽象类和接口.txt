1、类和类之间的关系
	1)继承
	2）一对一关联关系
		public class Book {
		
		}
		public class Student {
			private Book book; // 一对一
		}
	3）一对多关联关系
		public class Student {
			private Book[] books;
			
			private Book book;
			private Book book1;
			
		}
	4)聚合关系
		一个类由多个其他的类所组成
		
2、什么是抽象类？
	在原先普通类的基础上，class前面加abstract关键字，则此类就是抽象类
	
	抽象类拥有与原先普通类一样的作用：可以定义成员变量，也可以定义构造方法，也可以定义成员方法。
			区别:可以定义抽象方法，在返回值类型前增加abstract关键字。抽象方法不能有方法体（没有方法的实现），
			直接以分号结尾。抽象方法为继承了该抽象类的普通子类提供了一个必须实现的规范（方法的重写）
			抽象方法只能定义在抽象类里
			
	不能创建抽象类的对象，只能去创建继承了此抽象类的普通类的对象
		public abstract class Person {
			public abstract void eat();
		}
		
		new Person(); 不能这么做
		public class Student extends Person {
			@Override
			public void eat() {
			}
		}
		new Student(); 这个可以
		
3、什么是接口？
	接口是特殊的抽象类
		接口只能有抽象方法，不能有普通的成员方法，不能有成员变量，但是可以有常量(参考USB.java接口类)
		
		接口中只能有抽象方法，并且抽象默认只能是public abstract修饰 
		void eat();
		public void eat();
		public abstract void eat();
		abstract void eat();
		
		=========>public abstract void eat();
		
		普通的类可以实现接口，则普通类必须实现接口中的所有方法
		抽象类也可以实现接口， 抽象类可以实现或不实现接口中的方法（为什么可以不实现？抽象类本身就可以定义抽象方法，所以可以不实现）
		
		一个实现类可以实现多个接口，每一个接口用逗号隔开，必须重写多个接口里的所有的抽象方法
		public interface IA {
			public void test1();
		}
		
		public interface IB {
			public void test2();
		}
		
		public class A implements IA, IB {
			@Override
			public void test1() {
			
			}
			
			@Override
			public void test2() {
			
			}
		}
		
		接口可以继承接口，并且支持多继承
		public interface SubINetwork extends INetwork, USB {
			// SubINetwork既有了INetwork里定义的抽象方法，又有了USB接口里定义的抽象方法
		}
		
		如果说一个类只想重写部分的抽象方法，怎么做？
		借助适配器（抽象类）来实现接口里的部分方法，把剩下的未实现的方法留给适配器的子类去实现
		适配器的命名规则：名称+Adapter  (将来在JavaSwing+JavaAWT窗口编程中会用到)
		TestAdapter
		
4、面向接口编程 
	用父类变量来引用子类的实例
	public class A {
		public void test() {
		
		}
	}
	
	public class B extends A {
		public void test1() {
		
		}
	}
	
	public class Test {
		public static void main(String... args) {
			A a = new B(); // 父类变量接收（引用）子类的实例
			a.test();// 可以
			// a.test1(); // 不可以，A类并没有test1方法，所以此时需要强制类型转换
			B b = (B) a;
			b.test1(); // 可以
		}	
	}
	
	public interface IA {
		public void test();
	}
	
	public class A implements IA {
		@Override
		public void test() {
		
		}
		
		public void test1() {
		
		}
	}
	
	public class TestA {
		public static void main(String... args) {
			IA a = new A(); // 用接口来引用实现类的对象
			a.test(); // 可以调用的
			// a.test1(); // 也不能调用
			A b = (A) a;
			b.test1();//可以调用
		}
	}
	
5、异常与错误
	Java里，如果程序碰到意外情况，则整个程序会被终止，这种情况称之为异常，必须要处理异常
		exception
		分为两类：
		编译时异常，在编译代码的时候出现的异常
		运行时异常，在程序运行的时候出现的异常
		
	Java程序运行，但是Java虚拟机出现开发者不能解决的问题，这种情况称之为错误。不需要处理错误
		error
		
		常见的异常类，异常类是用来描述程序出现了什么样的异常，包括异常的名称，异常的说明，代码哪一行，异常的根源是什么:
		常见的运行时异常：
		java.lang.Throwable：Java JDK里，表示所有可抛出的异常类和错误
				java.lang.Exception：Java的所有异常所表示的一个类，包含有运行时异常和编译时异常，此类的子类除了RuntimeException，其他的都是编译时异常
						java.lang.RuntimeException Java运行时异常，所有继承自此类的异常，都属于运行时异常
								java.lang.ArithmeticException 数学运算异常
								java.lang.NullPointerException空指针异常，使用了没有初始化的对象则一定出现此异常，如果以后出现此异常，则需要分析是不是哪个对象是null的，但却用了这个对象
								java.lang.ArrayIndexOutOfBoundsException数组越界异常
								java.lang.IllegalArgumentException非法参数异常（java.lang.NumberFormatException是其子类）
										java.lang.NumberFormatException数字格式化异常
		编译时异常：
		java.lang.FileNotFoundException文件未找到异常
		必须在代码中显式地进行异常的处理，两种处理方式：
		1）抛出异常
			throws，表示一个方法如果出现异常，此异常不进行相应的处理，而是直接告诉调用者把异常信息直接抛出
			如果是main方法把异常抛出，则最终异常的处理交给了JVM虚拟机
			如果不是main方法，则异常需要一层一层地往上抛（一直由调用者把异常抛出，最终由main方法把异常抛出，此时由JVM虚拟机处理）
			
			public void test() throws 异常类
			
		2）捕捉异常，不会终止整个程序的运行
			try {
				// 可能出现异常的代码
			} catch(可能出现的异常类 e) {
				// 使用异常类对象e来输出异常的信息
				// 处理异常
			} catch() {
				//如果try里面的代码会出现多个异常，则可以使用多个catch语句块
			} finally {
				// 不管有没有出现异常，必定会执行的代码（关闭输入输出流，关闭数据库连接等）。
				// 如果有return，则finally也会执行，且在return前执行
			}
			语句块来捕捉并处理异常
			
			异常处理的基本原则：谁发现异常，谁处理异常
	
6、自定义异常类
		自己写一个类，继承自Exception类，则此类就是自定义的异常类
		public class StudentAgeException extends Exception {
		
		}
		
		满足某个条件的时候，把异常抛出
		public void test() throws StudentAgeException {
			if (条件) {
				throw new StudentAgeException();
			}
		}
		
		java.lang.Throwable类
		
		
7、如何打开类的源代码：
	1）在源代码里面，鼠标指针在想要打开的类上，按F3(Fn + F3)
	2)Ctrl + Shift + T，打开Open Type的窗口，输入类的名称即可
	
8、final, finally, finalize
	1)在一个变量前加上final关键字，常量
		在一个方法前加上final关键字，则此方法不能被重写
		在一个类前加上final关键字（最终类，终极类），则此类不能被继承
	2）finally与try...catch...语句块一起使用，表示不管有没有出现异常，最终都得执行的代码，通常用于关闭一些不用的资源
	3）finalize，是Object类提供的一个方法，此方法用于垃圾回收，当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法
	
	什么是垃圾回收？
		没有被使用（引用）的对象都是垃圾，JVM虚拟机会在适当的时候通过对象的finalize()方法把此对象回收。
		开发者不能够控制JVM虚拟机什么时候就垃圾回收，只能通知JVM虚拟机，尽快处理垃圾回收
		通过调用System.gc();方法通知JVM尽快回收
			
			
			 
			